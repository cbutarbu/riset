{"ast":null,"code":"// xml2js is optional because only needed for geonames support\nvar xml2js = require(\"xml2js\");\n\nvar request = require(\"request\");\n\nvar _ = require('underscore');\n\nexports.geocode = function (providerOpts, loc, cbk, opts) {\n  var options = _.extend({\n    q: loc,\n    maxRows: 10,\n    username: providerOpts.username || \"demo\"\n  }, opts || {});\n\n  request({\n    uri: \"http://api.geonames.org/searchJSON\",\n    qs: options\n  }, function (err, resp, body) {\n    if (err) return cbk(err);\n    var result;\n\n    try {\n      result = JSON.parse(body);\n    } catch (err) {\n      cbk(err);\n      return;\n    }\n\n    cbk(null, result);\n  });\n};\n\nexports.reverseGeocode = function (providerOpts, lat, lng, cbk, opts) {\n  var options = _.extend({\n    lat: lat,\n    lng: lng,\n    username: providerOpts.username || \"demo\"\n  }, opts || {});\n\n  request({\n    uri: \"http://api.geonames.org/extendedFindNearby\",\n    qs: options\n  }, function (err, resp, body) {\n    if (err) return cbk(err);\n    var parser = new xml2js.Parser();\n    parser.parseString(body, function (err, result) {\n      if (err) return cbk(err); // Transform geonames' structure into something that looks like Google's JSON outpu\n      // https://developers.google.com/maps/documentation/geocoding/#JSON\n\n      var googlejson = {\n        \"status\": \"OK\",\n        \"results\": [{\n          \"address_components\": [],\n          \"formatted_address\": \"\",\n          \"geometry\": {\n            \"location\": {\n              \"lat\": lat,\n              \"lng\": lng\n            }\n          }\n        }]\n      };\n\n      if (result.geonames.address) {\n        var a = result.geonames.address[0];\n        if (a.streetNumber && typeof a.streetNumber[0] == \"string\") googlejson.results[0].address_components.push({\n          \"long_name\": a.streetNumber[0],\n          \"short_name\": a.streetNumber[0],\n          \"types\": [\"street_number\"]\n        });\n        if (a.street && typeof a.street[0] == \"string\") googlejson.results[0].address_components.push({\n          \"long_name\": a.street[0],\n          \"short_name\": a.street[0],\n          \"types\": [\"route\"]\n        });\n        if (a.placename && typeof a.placename[0] == \"string\") googlejson.results[0].address_components.push({\n          \"long_name\": a.placename[0],\n          \"short_name\": a.placename[0],\n          \"types\": [\"locality\", \"political\"]\n        });\n        if (a.adminName1 && typeof a.adminName1[0] == \"string\") googlejson.results[0].address_components.push({\n          \"long_name\": a.adminName1[0],\n          \"short_name\": a.adminCode1[0],\n          \"types\": [\"administrative_area_level_1\", \"political\"]\n        });\n        if (a.adminName2 && typeof a.adminName2[0] == \"string\") googlejson.results[0].address_components.push({\n          \"long_name\": a.adminName2[0],\n          \"short_name\": a.adminCode2[0],\n          \"types\": [\"administrative_area_level_2\", \"political\"]\n        });\n        if (a.countryCode && typeof a.countryCode[0] == \"string\") googlejson.results[0].address_components.push({\n          \"long_name\": a.countryCode[0] == \"US\" ? \"United States\" : \"\",\n          \"short_name\": a.countryCode[0],\n          \"types\": [\"country\"]\n        });\n        if (a.lat && typeof a.lat[0] == \"string\") googlejson.results[0].geometry.location = {\n          \"lat\": parseFloat(a.lat[0]),\n          \"lng\": parseFloat(a.lng[0])\n        };\n      }\n\n      if (result.geonames.geoname) {\n        // http://www.geonames.org/export/codes.html\n        // https://developers.google.com/maps/documentation/geocoding/#Types\n        var fcode2google = {\n          \"ADM1\": [\"administrative_area_level_1\", \"political\"],\n          \"ADM2\": [\"administrative_area_level_2\", \"political\"],\n          \"ADM3\": [\"administrative_area_level_3\", \"political\"],\n          \"ADMD\": [\"political\"],\n          \"PPL\": [\"locality\"]\n        };\n        result.geonames.geoname.forEach(function (geoname) {\n          // Push only recognized types to results\n          if (geoname.fcode[0] == \"PCLI\") {\n            googlejson.results[0].address_components.push({\n              \"long_name\": geoname.name[0],\n              \"short_name\": geoname.countryCode[0],\n              \"types\": [\"country\", \"political\"]\n            });\n          } else if (fcode2google[geoname.fcode[0]]) {\n            googlejson.results[0].address_components.push({\n              \"long_name\": geoname.toponymName[0],\n              \"short_name\": geoname.name[0],\n              \"types\": fcode2google[geoname.fcode[0]]\n            });\n          }\n        });\n      } // Make a formatted address as well as we can\n\n\n      var shortNames = {};\n      googlejson.results[0].address_components.forEach(function (c) {\n        if (c.types[0] == \"country\") return shortNames.country = c.long_name || c.short_name;\n        shortNames[c.types[0]] = c.short_name;\n      });\n      var formatted = [];\n\n      if (shortNames.street_number || shortNames.route) {\n        formatted.push((shortNames.street_number ? shortNames.street_number + \" \" : \"\") + shortNames.route);\n      }\n\n      if (shortNames.locality) {\n        formatted.push(shortNames.locality);\n      }\n\n      if (shortNames.administrative_area_level_1) {\n        formatted.push(shortNames.administrative_area_level_1);\n      }\n\n      if (shortNames.country) {\n        formatted.push(shortNames.country);\n      }\n\n      googlejson.results[0].formatted_address = formatted.join(\", \");\n      cbk(null, googlejson);\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"script"}