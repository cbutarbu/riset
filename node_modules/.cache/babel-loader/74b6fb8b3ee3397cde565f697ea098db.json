{"ast":null,"code":"var util = require('util');\n\nvar AbstractGeocoder = require('./abstractgeocoder');\n/**\n * Constructor\n * @param <object> httpAdapter Http Adapter\n * @param <object> options     Options (language, clientId, apiKey)\n */\n\n\nvar TomTomGeocoder = function TomTomGeocoder(httpAdapter, options) {\n  TomTomGeocoder.super_.call(this, httpAdapter, options);\n\n  if (!this.options.apiKey || this.options.apiKey == 'undefined') {\n    throw new Error('You must specify an apiKey');\n  }\n};\n\nutil.inherits(TomTomGeocoder, AbstractGeocoder); // TomTom geocoding API endpoint\n\nTomTomGeocoder.prototype._endpoint = 'https://api.tomtom.com/search/2/geocode';\n/**\n* Geocode\n* @param <string>   value    Value to geocode (Address)\n* @param <function> callback Callback method\n*/\n\nTomTomGeocoder.prototype._geocode = function (value, callback) {\n  var _this = this;\n\n  var params = {\n    key: this.options.apiKey\n  };\n\n  if (this.options.language) {\n    params.language = this.options.language;\n  }\n\n  var url = this._endpoint + '/' + encodeURIComponent(value) + '.json';\n  this.httpAdapter.get(url, params, function (err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      var results = [];\n\n      for (var i = 0; i < result.results.length; i++) {\n        results.push(_this._formatResult(result.results[i]));\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n\nTomTomGeocoder.prototype._formatResult = function (result) {\n  return {\n    'latitude': result.position.lat,\n    'longitude': result.position.lon,\n    'country': result.address.country,\n    'city': result.address.localName,\n    'state': result.address.countrySubdivision,\n    'zipcode': result.address.postcode,\n    'streetName': result.address.streetName,\n    'streetNumber': result.address.streetNumber,\n    'countryCode': result.address.countryCode\n  };\n};\n\nmodule.exports = TomTomGeocoder;","map":null,"metadata":{},"sourceType":"script"}