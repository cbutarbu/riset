{"ast":null,"code":"var util = require('util'),\n    AbstractGeocoder = require('./abstractgeocoder');\n/**\n * Constructor\n * @param <object> httpAdapter Http Adapter\n * @param <object> options     Options (appId, appCode, language, politicalView, country, state)\n */\n\n\nvar HereGeocoder = function HereGeocoder(httpAdapter, options) {\n  this.options = ['appId', 'appCode', 'language', 'politicalView', 'country', 'state'];\n  HereGeocoder.super_.call(this, httpAdapter, options);\n\n  if (!this.options.appId || !this.options.appCode) {\n    throw new Error('You must specify appId and appCode to use Here Geocoder');\n  }\n};\n\nutil.inherits(HereGeocoder, AbstractGeocoder); // Here geocoding API endpoint\n\nHereGeocoder.prototype._geocodeEndpoint = 'https://geocoder.cit.api.here.com/6.2/geocode.json'; // Here reverse geocoding API endpoint\n\nHereGeocoder.prototype._reverseEndpoint = 'https://reverse.geocoder.api.here.com/6.2/reversegeocode.json';\n/**\n * Geocode\n * @param <string>   value    Value ton geocode (Address)\n * @param <function> callback Callback method\n */\n\nHereGeocoder.prototype._geocode = function (value, callback) {\n  var _this = this;\n\n  var params = this._prepareQueryString();\n\n  if (value.address) {\n    if (value.language) {\n      params.language = value.language;\n    }\n\n    if (value.politicalView) {\n      params.politicalview = value.politicalView;\n    }\n\n    if (value.country) {\n      params.country = value.country;\n\n      if (value.state) {\n        params.state = value.state;\n      } else {\n        delete params.state;\n      }\n    }\n\n    if (value.zipcode) {\n      params.postalcode = value.zipcode;\n    }\n\n    params.searchtext = value.address;\n  } else {\n    params.searchtext = value;\n  }\n\n  this.httpAdapter.get(this._geocodeEndpoint, params, function (err, result) {\n    var results = [];\n    results.raw = result;\n\n    if (err) {\n      return callback(err, results);\n    } else {\n      var view = result.Response.View[0];\n\n      if (!view) {\n        return callback(false, results);\n      } // Format each geocoding result\n\n\n      results = view.Result.map(_this._formatResult);\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n\nHereGeocoder.prototype._prepareQueryString = function () {\n  var params = {\n    'additionaldata': 'Country2,true',\n    'gen': 8\n  };\n\n  if (this.options.appId) {\n    params.app_id = this.options.appId;\n  }\n\n  if (this.options.appCode) {\n    params.app_code = this.options.appCode;\n  }\n\n  if (this.options.language) {\n    params.language = this.options.language;\n  }\n\n  if (this.options.politicalView) {\n    params.politicalview = this.options.politicalView;\n  }\n\n  if (this.options.country) {\n    params.country = this.options.country;\n  }\n\n  if (this.options.state) {\n    params.state = this.options.state;\n  }\n\n  return params;\n};\n\nHereGeocoder.prototype._formatResult = function (result) {\n  var location = result.Location || {};\n  var address = location.Address || {};\n  var i;\n  var extractedObj = {\n    formattedAddress: address.Label || null,\n    latitude: location.DisplayPosition.Latitude,\n    longitude: location.DisplayPosition.Longitude,\n    country: null,\n    countryCode: address.Country || null,\n    state: address.State || null,\n    county: address.County || null,\n    city: address.City || null,\n    zipcode: address.PostalCode || null,\n    district: address.District || null,\n    streetName: address.Street || null,\n    streetNumber: address.HouseNumber || null,\n    building: address.Building || null,\n    extra: {\n      herePlaceId: location.LocationId || null,\n      confidence: result.Relevance || 0\n    },\n    administrativeLevels: {}\n  };\n\n  for (i = 0; i < address.AdditionalData.length; i++) {\n    var additionalData = address.AdditionalData[i];\n\n    switch (additionalData.key) {\n      //Country 2-digit code\n      case 'Country2':\n        extractedObj.countryCode = additionalData.value;\n        break;\n      //Country name\n\n      case 'CountryName':\n        extractedObj.country = additionalData.value;\n        break;\n      //State name\n\n      case 'StateName':\n        extractedObj.administrativeLevels.level1long = additionalData.value;\n        extractedObj.state = additionalData.value;\n        break;\n      //County name\n\n      case 'CountyName':\n        extractedObj.administrativeLevels.level2long = additionalData.value;\n        extractedObj.county = additionalData.value;\n    }\n  }\n\n  return extractedObj;\n};\n/**\n * Reverse geocoding\n * @param {lat:<number>,lon:<number>}  lat: Latitude, lon: Longitude\n * @param <function> callback Callback method\n */\n\n\nHereGeocoder.prototype._reverse = function (query, callback) {\n  var lat = query.lat;\n  var lng = query.lon;\n\n  var _this = this;\n\n  var params = this._prepareQueryString();\n\n  params.pos = lat + ',' + lng;\n  params.mode = 'trackPosition';\n  this.httpAdapter.get(this._reverseEndpoint, params, function (err, result) {\n    var results = [];\n    results.raw = result;\n\n    if (err) {\n      return callback(err, results);\n    } else {\n      var view = result.Response.View[0];\n\n      if (!view) {\n        return callback(false, results);\n      } // Format each geocoding result\n\n\n      results = view.Result.map(_this._formatResult);\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n\nmodule.exports = HereGeocoder;","map":null,"metadata":{},"sourceType":"script"}