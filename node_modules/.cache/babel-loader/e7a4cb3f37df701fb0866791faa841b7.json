{"ast":null,"code":"/**\n * Geocoder\n */\n\n/**\n * Module Dependencies\n */\n\n/**\n * Version\n */\nvar version = '0.2.3';\n/**\n * Geocoder\n */\n\nfunction Geocoder() {\n  this.selectProvider(\"google\");\n}\n\n;\n/**\n * Geocoder prototype\n */\n\nGeocoder.prototype = {\n  /**\n   * Selects a webservice provider\n   *\n   * @param {String} name, required\n   * @param {Object} opts, optional\n   * @api public\n   */\n  selectProvider: function (name, opts) {\n    if (!name) {\n      return cbk(new Error(\"Geocoder.selectProvider requires a name.\"));\n    }\n\n    this.provider = name;\n    this.providerOpts = opts || {};\n    this.providerObj = require(\"./providers/\" + name);\n  },\n\n  /**\n   * Request geocoordinates of given `loc` from Google\n   *\n   * @param {String} loc, required\n   * @param {Function} cbk, required\n   * @param {Object} opts, optional\n   * @api public\n   */\n  geocode: function (loc, cbk, opts) {\n    if (!loc) {\n      return cbk(new Error(\"Geocoder.geocode requires a location.\"));\n    }\n\n    return this.providerObj.geocode(this.providerOpts, loc, cbk, opts);\n  },\n  reverseGeocode: function (lat, lng, cbk, opts) {\n    if (!lat || !lng) {\n      return cbk(new Error(\"Geocoder.reverseGeocode requires a latitude and longitude.\"));\n    }\n\n    return this.providerObj.reverseGeocode(this.providerOpts, lat, lng, cbk, opts);\n  },\n\n  /**\n   * Return Geocoder version\n   *\n   * @api public\n   */\n  version: version\n};\n/**\n * Export\n */\n\nmodule.exports = new Geocoder();","map":null,"metadata":{},"sourceType":"script"}